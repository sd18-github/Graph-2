/*
 * TC: O(n^2)
 * SC: O(n)
 */
public class MinimizeMalwareSpread {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionFind uf = new UnionFind(n);
        //union all components
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                if(graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        int[] size = uf.getSize();

        // get the size of initial infection in each component
        int[] componentInfectionCount = new int[n];
        for(int i: initial) {
            componentInfectionCount[uf.find(i)]++;
        }

        int nodeToBeRemoved = -1;
        int minNode = Integer.MAX_VALUE;
        int maxSize = 0;
        for(int i: initial) {
            if(minNode > i) minNode = i;
            // get the component representative
            int rootI = uf.find(i);
            // if this is the only node from that component
            // only then is this initial node a candidate for removal
            if(componentInfectionCount[rootI] == 1) {
                //among these, the smallest node of the largest component
                //is the node to be removed
                int sz = size[rootI];
                if(maxSize < sz) {
                    maxSize = sz;
                    nodeToBeRemoved = i;
                } else if (sz == maxSize && i < nodeToBeRemoved) {
                    nodeToBeRemoved = i;
                }
            }
        }
        //if there is no valid node found, remove the minNode
        return nodeToBeRemoved == -1 ? minNode : nodeToBeRemoved;
    }
    static class UnionFind {
        int[] parent;
        int[] size;

        UnionFind(int n) {
            parent = new int[n];
            size = new int[n];

            for (int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }

        int find(int x) {
            if(x == parent[x]) {
                return x;
            }
            return parent[x] = find(parent[x]);
        }

        void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);

            if(rootX == rootY) return;
            if(size[rootX] >= size[rootY]) {
                parent[rootY] = rootX;
                size[rootX] += size[rootY];
            } else {
                parent[rootX] = rootY;
                size[rootY] += size[rootX];
            }
        }

        int[] getSize() {
            return size;
        }
    }
}
